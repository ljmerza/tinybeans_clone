# Generated by Django 5.2.6 on 2025-02-14

import hashlib
import hmac

from django.conf import settings
from django.db import migrations, models


def forwards_populate_token_hash(apps, schema_editor):
    MagicLoginToken = apps.get_model('auth_app', 'MagicLoginToken')
    signing_key = getattr(settings, 'MAGIC_LOGIN_TOKEN_SIGNING_KEY', settings.SECRET_KEY).encode('utf-8')

    for token_obj in MagicLoginToken.objects.all().iterator():
        if token_obj.token_hash:
            continue

        raw_token = token_obj.token or ''
        if not raw_token:
            # Nothing to hash; leave blank (legacy records will be unusable)
            continue

        token_hash = hmac.new(signing_key, raw_token.encode('utf-8'), hashlib.sha256).hexdigest()
        token_obj.token_hash = token_hash
        token_obj.token = ''
        token_obj.save(update_fields=['token_hash', 'token'])


def backwards_restore_token(apps, schema_editor):
    MagicLoginToken = apps.get_model('auth_app', 'MagicLoginToken')
    for token_obj in MagicLoginToken.objects.all().iterator():
        if token_obj.token_hash and not token_obj.token:
            # Store the hash in the legacy column for compatibility
            token_obj.token = token_obj.token_hash
            token_obj.save(update_fields=['token'])


class Migration(migrations.Migration):

    dependencies = [
        ('auth_app', '0007_googleoauthstate'),
    ]

    operations = [
        migrations.AddField(
            model_name='magiclogintoken',
            name='token_hash',
            field=models.CharField(blank=True, db_index=True, max_length=64, null=True, unique=True),
        ),
        migrations.AlterField(
            model_name='magiclogintoken',
            name='token',
            field=models.CharField(blank=True, default='', max_length=64),
        ),
        migrations.RemoveIndex(
            model_name='magiclogintoken',
            name='auth_app_ma_token_10672d_idx',
        ),
        migrations.AddIndex(
            model_name='magiclogintoken',
            index=models.Index(fields=['token_hash', 'is_used'], name='auth_app_ma_tokenhash_idx'),
        ),
        migrations.RunPython(forwards_populate_token_hash, backwards_restore_token),
        migrations.AlterField(
            model_name='magiclogintoken',
            name='token_hash',
            field=models.CharField(db_index=True, max_length=64, unique=True),
        ),
    ]
