"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from kombu import Queue
from django.core.exceptions import ImproperlyConfigured


def _env_flag(name: str, default: bool = False) -> bool:
    value = os.environ.get(name)
    if value is None:
        return default
    return value.lower() in {'1', 'true', 'yes', 'on'}

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: don't run with debug turned on in production!
_default_debug = os.environ.get('DJANGO_SECRET_KEY') is None
DEBUG = _env_flag('DJANGO_DEBUG', default=_default_debug)

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY')
if not SECRET_KEY:
    if DEBUG:
        SECRET_KEY = 'django-insecure-i@gm65z6a6396b+n+h+3q)*@cmf$^q-3@bq0&y8!d=gn^%i^fj'
    else:
        raise ImproperlyConfigured('DJANGO_SECRET_KEY must be set when DEBUG is False')

_default_allowed_hosts = "localhost,127.0.0.1,[::1],web"
allowed_hosts_env = os.environ.get('DJANGO_ALLOWED_HOSTS', _default_allowed_hosts)
ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_env.split(',') if host.strip()]

if not DEBUG and ('*' in ALLOWED_HOSTS or not ALLOWED_HOSTS):
    raise ImproperlyConfigured('DJANGO_ALLOWED_HOSTS must be defined without wildcards when DEBUG is False')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'main.apps.MainConfig',
    'emails.apps.EmailingConfig',
    'messaging.apps.MessagingConfig',
    'drf_spectacular',
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    'auth.apps.AuthConfig',
    'users.apps.UsersConfig',
    'keeps.apps.KeepsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'tinybeans'),
        'USER': os.environ.get('POSTGRES_USER', 'tinybeans'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'tinybeans'),
        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

if os.environ.get('USE_SQLITE_FALLBACK'):
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTH_USER_MODEL = 'users.User'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}


from datetime import timedelta

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=30),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
}


REDIS_URL = os.environ.get('REDIS_URL', 'redis://127.0.0.1:6379/0')
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': REDIS_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
    },
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

EMAIL_BACKEND = os.environ.get(
    'EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend'
)
EMAIL_HOST = os.environ.get('EMAIL_HOST', 'localhost')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 25))
EMAIL_USE_TLS = _env_flag('EMAIL_USE_TLS', default=False)
EMAIL_USE_SSL = _env_flag('EMAIL_USE_SSL', default=False)
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'no-reply@example.com')

ACCOUNT_FRONTEND_BASE_URL = os.environ.get(
    'ACCOUNT_FRONTEND_BASE_URL',
    os.environ.get('FRONTEND_BASE_URL', 'http://localhost:3000'),
)

MAILJET_API_KEY = os.environ.get('MAILJET_API_KEY', '')
MAILJET_API_SECRET = os.environ.get('MAILJET_API_SECRET', '')
MAILJET_API_URL = os.environ.get('MAILJET_API_URL', 'https://api.mailjet.com/v3.1/send')
MAILJET_FROM_EMAIL = os.environ.get('MAILJET_FROM_EMAIL') or DEFAULT_FROM_EMAIL
MAILJET_FROM_NAME = os.environ.get('MAILJET_FROM_NAME', 'Tinybeans Circles')
MAILJET_USE_SANDBOX = _env_flag('MAILJET_USE_SANDBOX', default=False)
MAILJET_ENABLED = bool(MAILJET_API_KEY and MAILJET_API_SECRET)

SPECTACULAR_SETTINGS = {
    'TITLE': 'Circle Sharing API',
    'DESCRIPTION': 'OpenAPI schema for circle management, invitations, and media sharing.',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'SERVE_PERMISSIONS': ['rest_framework.permissions.AllowAny'],
}


CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', REDIS_URL)
CELERY_RESULT_BACKEND = os.environ.get('CELERY_RESULT_BACKEND', REDIS_URL)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE
CELERY_TASK_DEFAULT_QUEUE = 'maintenance'
CELERY_TASK_QUEUES = (
    Queue('email'),
    Queue('sms'),
    Queue('media'),
    Queue('maintenance'),
)
CELERY_TASK_ROUTES = {
    'emails.tasks.send_email_task': {'queue': 'email'},
    'messaging.tasks.send_sms_async': {'queue': 'sms'},
    'messaging.tasks.send_2fa_sms': {'queue': 'sms'},
    'keeps.tasks.process_media_upload': {'queue': 'media'},
    'keeps.tasks.generate_image_sizes': {'queue': 'media'},
    'keeps.tasks.cleanup_failed_uploads': {'queue': 'media'},
    'keeps.tasks.validate_media_file': {'queue': 'media'},
    'auth.tasks.cleanup_expired_trusted_devices': {'queue': 'maintenance'},
    'mysite.celery.debug_task': {'queue': 'maintenance'},
}
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_ALWAYS_EAGER = _env_flag('CELERY_TASK_ALWAYS_EAGER')
CELERY_TASK_EAGER_PROPAGATES = _env_flag('CELERY_TASK_EAGER_PROPAGATES', default=True)
CELERY_TASK_SOFT_TIME_LIMIT = int(os.environ.get('CELERY_TASK_SOFT_TIME_LIMIT', 30))
CELERY_TASK_TIME_LIMIT = int(os.environ.get('CELERY_TASK_TIME_LIMIT', 40))

# Media Storage Configuration - MinIO Only
MEDIA_STORAGE_BACKEND = 'minio'

# MinIO Settings (S3-compatible object storage)
MINIO_ENDPOINT = os.environ.get('MINIO_ENDPOINT', 'http://minio:9020')
MINIO_ACCESS_KEY = os.environ.get('MINIO_ACCESS_KEY', 'minioadmin')
MINIO_SECRET_KEY = os.environ.get('MINIO_SECRET_KEY', 'minioadmin')
MINIO_BUCKET_NAME = os.environ.get('MINIO_BUCKET_NAME', 'tinybeans-media')
MINIO_USE_SSL = _env_flag('MINIO_USE_SSL', default=False)

# Media Upload Settings
MAX_UPLOAD_SIZE = int(os.environ.get('MAX_UPLOAD_SIZE', 100 * 1024 * 1024))  # 100MB
ALLOWED_IMAGE_TYPES = ['image/jpeg', 'image/png', 'image/gif', 'image/webp']
ALLOWED_VIDEO_TYPES = ['video/mp4', 'video/quicktime', 'video/x-msvideo']

# Image Processing Settings
IMAGE_SIZES = {
    'thumbnail': (150, 150),
    'gallery': (800, 600),
    'full': None,  # Original size
}

# CORS Configuration for Development
if DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",
        "http://127.0.0.1:3000",
        "http://192.168.1.76:3000",
    ]
    CORS_ALLOW_CREDENTIALS = True
    CORS_ALLOW_HEADERS = [
        'accept',
        'accept-encoding',
        'authorization',
        'content-type',
        'dnt',
        'origin',
        'user-agent',
        'x-csrftoken',
        'x-requested-with',
    ]

# 2FA Settings
TWOFA_ENABLED = _env_flag('TWOFA_ENABLED', default=True)
TWOFA_CODE_LENGTH = 6
TWOFA_CODE_EXPIRY_MINUTES = 10
TWOFA_MAX_ATTEMPTS = 5
TWOFA_RATE_LIMIT_WINDOW = int(os.environ.get('TWOFA_RATE_LIMIT_WINDOW', 900))
TWOFA_RATE_LIMIT_MAX = int(os.environ.get('TWOFA_RATE_LIMIT_MAX', 3))
TWOFA_RECOVERY_CODE_COUNT = 10
TWOFA_ISSUER_NAME = os.environ.get('TWOFA_ISSUER_NAME', 'Tinybeans')

# 2FA Security - Encryption Key for TOTP Secrets
# SECURITY WARNING: Keep this secret! Generate with: python -c "from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())"
TWOFA_ENCRYPTION_KEY = os.environ.get('TWOFA_ENCRYPTION_KEY')
if not TWOFA_ENCRYPTION_KEY:
    if DEBUG:
        TWOFA_ENCRYPTION_KEY = '5pK6Bm8rEICTnaRJvv0eQilwcmHeuTU1dRYrI-4VvEc='
    else:
        raise ImproperlyConfigured('TWOFA_ENCRYPTION_KEY must be set when DEBUG is False')

# 2FA Account Lockout
TWOFA_LOCKOUT_ENABLED = _env_flag('TWOFA_LOCKOUT_ENABLED', default=True)
TWOFA_LOCKOUT_DURATION_MINUTES = int(os.environ.get('TWOFA_LOCKOUT_DURATION_MINUTES', 30))
TWOFA_LOCKOUT_THRESHOLD = int(os.environ.get('TWOFA_LOCKOUT_THRESHOLD', 5))

# Trusted Devices (Remember Me)
TWOFA_TRUSTED_DEVICE_ENABLED = _env_flag('TWOFA_TRUSTED_DEVICE_ENABLED', default=True)
TWOFA_TRUSTED_DEVICE_MAX_AGE_DAYS = int(os.environ.get('TWOFA_TRUSTED_DEVICE_MAX_AGE_DAYS', 30))
TWOFA_TRUSTED_DEVICE_MAX_COUNT = int(os.environ.get('TWOFA_TRUSTED_DEVICE_MAX_COUNT', 5))

# SMS Provider Settings
SMS_PROVIDER = os.environ.get('SMS_PROVIDER', 'twilio')
TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID', '')
TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN', '')
TWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER', '')

# Rate limiting (django-ratelimit)
RATELIMIT_ENABLE = _env_flag('RATELIMIT_ENABLE', default=not DEBUG)
