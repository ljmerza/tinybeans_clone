# Generated by Django 5.2.6 on 2025-10-26 22:58

from django.db import migrations, models


def set_existing_owners_forward(apps, schema_editor):
    """Mark circle creators as owners in their membership records.

    For existing circles:
    1. Find the creator via circle.created_by
    2. Find or create their membership record
    3. Mark them as owner with admin role
    """
    Circle = apps.get_model('users', 'Circle')
    CircleMembership = apps.get_model('users', 'CircleMembership')

    # Get UserRole.CIRCLE_ADMIN value without importing the model
    CIRCLE_ADMIN = 'admin'

    circles_updated = 0
    memberships_created = 0

    for circle in Circle.objects.select_related('created_by').all():
        # Get or create the owner's membership
        membership, created = CircleMembership.objects.get_or_create(
            circle=circle,
            user=circle.created_by,
            defaults={
                'role': CIRCLE_ADMIN,
                'is_owner': True,
                # invited_by is null for owner
            }
        )

        if created:
            memberships_created += 1
        elif not membership.is_owner:
            # Update existing membership to be owner
            membership.is_owner = True
            if membership.role != CIRCLE_ADMIN:
                membership.role = CIRCLE_ADMIN
            membership.save()
            circles_updated += 1

    if circles_updated > 0 or memberships_created > 0:
        print(f"Data migration complete:")
        print(f"  - {memberships_created} owner memberships created")
        print(f"  - {circles_updated} existing memberships updated to owner")


def set_existing_owners_reverse(apps, schema_editor):
    """Reverse migration - remove owner flags."""
    CircleMembership = apps.get_model('users', 'CircleMembership')
    CircleMembership.objects.filter(is_owner=True).update(is_owner=False)


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0001_initial'),
    ]

    operations = [
        # Step 1: Add the is_owner field
        migrations.AddField(
            model_name='circlemembership',
            name='is_owner',
            field=models.BooleanField(default=False, help_text='True if this user is the circle owner (creator)'),
        ),
        # Step 2: Run data migration to populate is_owner for existing circles
        migrations.RunPython(
            set_existing_owners_forward,
            set_existing_owners_reverse,
        ),
        # Step 3: Add database constraint (one owner per circle)
        migrations.AddConstraint(
            model_name='circlemembership',
            constraint=models.UniqueConstraint(condition=models.Q(('is_owner', True)), fields=('circle',), name='one_owner_per_circle'),
        ),
    ]
