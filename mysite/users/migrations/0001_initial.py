# Generated by Django 5.2.6 on 2025-10-23 14:19

import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import mysite.users.models.user
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('role', models.CharField(choices=[('admin', 'Circle Admin'), ('member', 'Circle Member')], default='member', max_length=20)),
                ('email_verified', models.BooleanField(default=False)),
                ('google_id', models.CharField(blank=True, db_index=True, help_text='Google user ID from OAuth', max_length=100, null=True, unique=True)),
                ('google_email', models.EmailField(blank=True, help_text='Email from Google (for debugging/tracking)', max_length=254, null=True)),
                ('password_login_enabled', models.BooleanField(default=True, help_text='Whether the user can authenticate via password')),
                ('auth_provider', models.CharField(choices=[('manual', 'Manual Registration'), ('google', 'Google OAuth Only'), ('hybrid', 'Both Manual and Google')], default='manual', help_text='Authentication method used by user', max_length=20)),
                ('google_linked_at', models.DateTimeField(blank=True, help_text='When Google account was linked', null=True)),
                ('last_google_sync', models.DateTimeField(blank=True, help_text='Last time user info was synced from Google', null=True)),
                ('language', models.CharField(choices=[('en', 'English'), ('es', 'Spanish')], default='en', help_text="User's preferred language for the interface", max_length=10)),
                ('circle_onboarding_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('dismissed', 'Dismissed')], default='pending', help_text="Progress of the user's first-circle onboarding", max_length=20)),
                ('circle_onboarding_updated_at', models.DateTimeField(blank=True, help_text='Last time the circle onboarding status changed', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'ordering': ['username'],
            },
            managers=[
                ('objects', mysite.users.models.user.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ChildProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('display_name', models.CharField(max_length=150, validators=[django.core.validators.MinLengthValidator(1)])),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('avatar_url', models.URLField(blank=True, null=True)),
                ('pronouns', models.CharField(blank=True, max_length=64)),
                ('pending_invite_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('upgrade_status', models.CharField(choices=[('unlinked', 'Unlinked'), ('pending', 'Pending'), ('linked', 'Linked')], default='unlinked', max_length=20)),
                ('upgrade_token', models.CharField(blank=True, max_length=64, null=True)),
                ('upgrade_token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('linked_user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_profile', to=settings.AUTH_USER_MODEL)),
                ('upgrade_requested_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_upgrades_requested', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['display_name'],
            },
        ),
        migrations.CreateModel(
            name='ChildGuardianConsent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('guardian_name', models.CharField(max_length=255)),
                ('guardian_relationship', models.CharField(max_length=255)),
                ('agreement_reference', models.CharField(blank=True, max_length=255)),
                ('consent_method', models.CharField(choices=[('digital_signature', 'Digital Signature'), ('paper_upload', 'Paper Upload'), ('verbal', 'Documented Verbal Consent')], max_length=32)),
                ('consent_metadata', models.JSONField(blank=True, default=dict)),
                ('signed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('captured_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='guardian_consents_captured', to=settings.AUTH_USER_MODEL)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='guardian_consents', to='users.childprofile')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ChildUpgradeAuditLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(choices=[('request_initiated', 'Request Initiated'), ('token_reissued', 'Token Reissued'), ('token_revoked', 'Token Revoked'), ('upgrade_completed', 'Upgrade Completed')], max_length=32)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='upgrade_audit_logs', to='users.childprofile')),
                ('performed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_upgrade_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Circle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='circles_created', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='childprofile',
            name='circle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='children', to='users.circle'),
        ),
        migrations.CreateModel(
            name='CircleInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('role', models.CharField(choices=[('admin', 'Circle Admin'), ('member', 'Circle Member')], default='member', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('cancelled', 'Cancelled'), ('expired', 'Expired')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('responded_at', models.DateTimeField(blank=True, null=True)),
                ('reminder_sent_at', models.DateTimeField(blank=True, null=True)),
                ('archived_at', models.DateTimeField(blank=True, null=True)),
                ('archived_reason', models.CharField(blank=True, max_length=100, null=True)),
                ('circle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='users.circle')),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='circle_invitations_sent', to=settings.AUTH_USER_MODEL)),
                ('invited_user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='circle_invitations_received', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CircleMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('admin', 'Circle Admin'), ('member', 'Circle Member')], default='member', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('circle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='users.circle')),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='memberships_invited', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='circle_memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['circle__name', 'user__username'],
            },
        ),
        migrations.CreateModel(
            name='PetProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=150, validators=[django.core.validators.MinLengthValidator(1)])),
                ('pet_type', models.CharField(choices=[('dog', 'Dog'), ('cat', 'Cat'), ('bird', 'Bird'), ('fish', 'Fish'), ('rabbit', 'Rabbit'), ('hamster', 'Hamster'), ('guinea_pig', 'Guinea Pig'), ('reptile', 'Reptile'), ('horse', 'Horse'), ('other', 'Other')], max_length=20)),
                ('breed', models.CharField(blank=True, max_length=100)),
                ('birthdate', models.DateField(blank=True, null=True)),
                ('avatar_url', models.URLField(blank=True, null=True)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('circle', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pets', to='users.circle')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserNotificationPreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify_new_media', models.BooleanField(default=True)),
                ('notify_weekly_digest', models.BooleanField(default=True)),
                ('channel', models.CharField(choices=[('email', 'Email'), ('push', 'Push')], default='email', max_length=20)),
                ('digest_frequency', models.CharField(choices=[('never', 'Never'), ('daily', 'Daily'), ('weekly', 'Weekly')], default='weekly', max_length=20)),
                ('push_enabled', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('circle', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to='users.circle')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['google_id'], name='users_google_id_idx'),
        ),
        migrations.AddIndex(
            model_name='circleinvitation',
            index=models.Index(fields=['circle', 'email'], name='users_circl_circle__fb8341_idx'),
        ),
        migrations.AddIndex(
            model_name='circleinvitation',
            index=models.Index(fields=['circle', 'invited_user'], name='users_circl_circle__51f8a7_idx'),
        ),
        migrations.AddIndex(
            model_name='circleinvitation',
            index=models.Index(fields=['status', 'reminder_sent_at'], name='users_circl_status_58bee6_idx'),
        ),
        migrations.AddIndex(
            model_name='circleinvitation',
            index=models.Index(fields=['circle', 'archived_at'], name='users_circl_circle__325fa5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='circlemembership',
            unique_together={('user', 'circle')},
        ),
        migrations.AlterUniqueTogether(
            name='usernotificationpreferences',
            unique_together={('user', 'circle')},
        ),
    ]
