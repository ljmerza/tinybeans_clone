import uuid
from django.conf import settings
from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.core.validators import MinLengthValidator
from django.db import models
from django.utils import timezone
from django.utils.text import slugify


class UserRole(models.TextChoices):
    CIRCLE_ADMIN = 'admin', 'Circle Admin'
    CIRCLE_MEMBER = 'member', 'Circle Member'


class UserManager(BaseUserManager):
    use_in_migrations = True

    def _create_user(self, username, email, password, **extra_fields):
        if not username:
            raise ValueError('The username must be set')
        if not email:
            raise ValueError('The email address must be set')
        email = self.normalize_email(email)
        username = self.model.normalize_username(username)
        user = self.model(username=username, email=email, **extra_fields)
        user.set_password(password)
        user.save(using=self._db)
        return user

    def create_user(self, username, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', False)
        extra_fields.setdefault('is_superuser', False)
        extra_fields.setdefault('role', UserRole.CIRCLE_MEMBER)
        return self._create_user(username, email, password, **extra_fields)

    def create_superuser(self, username, email, password=None, **extra_fields):
        extra_fields.setdefault('is_staff', True)
        extra_fields.setdefault('is_superuser', True)
        extra_fields.setdefault('role', UserRole.CIRCLE_ADMIN)

        if extra_fields.get('is_staff') is not True:
            raise ValueError('Superuser must have is_staff=True.')
        if extra_fields.get('is_superuser') is not True:
            raise ValueError('Superuser must have is_superuser=True.')

        return self._create_user(username, email, password, **extra_fields)


class User(AbstractUser):
    email = models.EmailField(unique=True)
    role = models.CharField(
        max_length=20,
        choices=UserRole.choices,
        default=UserRole.CIRCLE_MEMBER,
    )
    email_verified = models.BooleanField(default=False)

    objects = UserManager()

    REQUIRED_FIELDS = ['email']

    class Meta:
        ordering = ['username']


def generate_unique_slug(base_value: str, queryset):
    base_slug = slugify(base_value) or uuid.uuid4().hex[:12]
    slug = base_slug
    counter = 1
    while queryset.filter(slug=slug).exists():
        slug = f"{base_slug}-{counter}"
        counter += 1
    return slug


class Circle(models.Model):
    name = models.CharField(max_length=255)
    slug = models.SlugField(unique=True, max_length=255)
    created_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='circles_created',
    )
    created_at = models.DateTimeField(default=timezone.now)

    class Meta:
        ordering = ['name']

    def save(self, *args, **kwargs):
        if not self.slug:
            self.slug = generate_unique_slug(self.name, Circle.objects)
        super().save(*args, **kwargs)

    def __str__(self):
        return self.name


class CircleMembership(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)
    circle = models.ForeignKey(Circle, on_delete=models.CASCADE, related_name='memberships')
    role = models.CharField(max_length=20, choices=UserRole.choices, default=UserRole.CIRCLE_MEMBER)
    invited_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        null=True,
        blank=True,
        on_delete=models.SET_NULL,
        related_name='memberships_invited',
    )
    created_at = models.DateTimeField(default=timezone.now)

    class Meta:
        unique_together = ('user', 'circle')
        ordering = ['circle__name', 'user__username']

    def __str__(self):
        return f"{self.user} in {self.circle} ({self.role})"


class CircleInvitationStatus(models.TextChoices):
    PENDING = 'pending', 'Pending'
    ACCEPTED = 'accepted', 'Accepted'
    DECLINED = 'declined', 'Declined'
    CANCELLED = 'cancelled', 'Cancelled'
    EXPIRED = 'expired', 'Expired'


class CircleInvitation(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    circle = models.ForeignKey(Circle, on_delete=models.CASCADE, related_name='invitations')
    email = models.EmailField()
    invited_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.CASCADE,
        related_name='circle_invitations_sent',
    )
    role = models.CharField(max_length=20, choices=UserRole.choices, default=UserRole.CIRCLE_MEMBER)
    status = models.CharField(
        max_length=20,
        choices=CircleInvitationStatus.choices,
        default=CircleInvitationStatus.PENDING,
    )
    created_at = models.DateTimeField(default=timezone.now)
    responded_at = models.DateTimeField(blank=True, null=True)

    class Meta:
        ordering = ['-created_at']
        indexes = [
            models.Index(fields=['circle', 'email']),
        ]

    def __str__(self):
        return f"Invite {self.email} to {self.circle} ({self.status})"


class ChildProfileUpgradeStatus(models.TextChoices):
    UNLINKED = 'unlinked', 'Unlinked'
    PENDING = 'pending', 'Pending'
    LINKED = 'linked', 'Linked'


class ChildProfile(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    circle = models.ForeignKey(Circle, on_delete=models.CASCADE, related_name='children')
    display_name = models.CharField(max_length=150, validators=[MinLengthValidator(1)])
    birthdate = models.DateField(blank=True, null=True)
    avatar_url = models.URLField(blank=True, null=True)
    pronouns = models.CharField(max_length=64, blank=True)
    favorite_moments = models.JSONField(default=list, blank=True)
    linked_user = models.OneToOneField(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
        related_name='child_profile',
    )
    pending_invite_email = models.EmailField(blank=True, null=True)
    upgrade_status = models.CharField(
        max_length=20,
        choices=ChildProfileUpgradeStatus.choices,
        default=ChildProfileUpgradeStatus.UNLINKED,
    )
    upgrade_requested_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
        related_name='child_upgrades_requested',
    )
    upgrade_token = models.CharField(max_length=64, blank=True, null=True)
    upgrade_token_expires_at = models.DateTimeField(blank=True, null=True)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        ordering = ['display_name']

    def __str__(self):
        return self.display_name

    def log_upgrade_event(self, event_type: str, performed_by=None, metadata=None):
        ChildUpgradeAuditLog.objects.create(
            child=self,
            event_type=event_type,
            performed_by=performed_by,
            metadata=metadata or {},
        )

    def clear_upgrade_token(self):
        self.upgrade_token = None
        self.upgrade_token_expires_at = None



class NotificationChannel(models.TextChoices):
    EMAIL = 'email', 'Email'
    PUSH = 'push', 'Push'


class DigestFrequency(models.TextChoices):
    NEVER = 'never', 'Never'
    DAILY = 'daily', 'Daily'
    WEEKLY = 'weekly', 'Weekly'


class UserNotificationPreferences(models.Model):
    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='notification_preferences')
    circle = models.ForeignKey(Circle, on_delete=models.CASCADE, related_name='notification_preferences', null=True, blank=True)
    notify_new_media = models.BooleanField(default=True)
    notify_weekly_digest = models.BooleanField(default=True)
    channel = models.CharField(max_length=20, choices=NotificationChannel.choices, default=NotificationChannel.EMAIL)
    digest_frequency = models.CharField(
        max_length=20,
        choices=DigestFrequency.choices,
        default=DigestFrequency.WEEKLY,
    )
    push_enabled = models.BooleanField(default=False)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        unique_together = (('user', 'circle'),)

    @property
    def is_circle_override(self) -> bool:
        return self.circle_id is not None

    def __str__(self):
        target = self.circle.name if self.circle else 'all circles'
        return f"Preferences for {self.user} ({target})"


class GuardianConsentMethod(models.TextChoices):
    DIGITAL_SIGNATURE = 'digital_signature', 'Digital Signature'
    PAPER_UPLOAD = 'paper_upload', 'Paper Upload'
    VERBAL = 'verbal', 'Documented Verbal Consent'


class ChildGuardianConsent(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    child = models.ForeignKey(ChildProfile, on_delete=models.CASCADE, related_name='guardian_consents')
    guardian_name = models.CharField(max_length=255)
    guardian_relationship = models.CharField(max_length=255)
    agreement_reference = models.CharField(max_length=255, blank=True)
    consent_method = models.CharField(max_length=32, choices=GuardianConsentMethod.choices)
    consent_metadata = models.JSONField(default=dict, blank=True)
    signed_at = models.DateTimeField(default=timezone.now)
    captured_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
        related_name='guardian_consents_captured',
    )
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"Consent for {self.child.display_name} by {self.guardian_name}"


class ChildUpgradeEventType(models.TextChoices):
    REQUEST_INITIATED = 'request_initiated', 'Request Initiated'
    TOKEN_REISSUED = 'token_reissued', 'Token Reissued'
    TOKEN_REVOKED = 'token_revoked', 'Token Revoked'
    UPGRADE_COMPLETED = 'upgrade_completed', 'Upgrade Completed'


class ChildUpgradeAuditLog(models.Model):
    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
    child = models.ForeignKey(ChildProfile, on_delete=models.CASCADE, related_name='upgrade_audit_logs')
    event_type = models.CharField(max_length=32, choices=ChildUpgradeEventType.choices)
    performed_by = models.ForeignKey(
        settings.AUTH_USER_MODEL,
        on_delete=models.SET_NULL,
        blank=True,
        null=True,
        related_name='child_upgrade_events',
    )
    metadata = models.JSONField(default=dict, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        ordering = ['-created_at']

    def __str__(self):
        return f"{self.child.display_name}: {self.event_type}"
