/**
 * 2FA Settings Page
 * Manage 2FA configuration, recovery codes, and trusted devices
 */

import { Layout } from "@/components/Layout";
import { LoadingPage } from "@/components/LoadingSpinner";
import { Button } from "@/components/ui/button";
import { RecoveryCodeList } from "@/modules/twofa/components/RecoveryCodeList";
import { VerificationInput } from "@/modules/twofa/components/VerificationInput";
import {
	use2FAStatus,
	useDisable2FA,
	useGenerateRecoveryCodes,
	useSetPreferredMethod,
} from "@/modules/twofa/hooks";
import type { TwoFactorMethod } from "@/modules/twofa/types";
import { createFileRoute, useNavigate } from "@tanstack/react-router";
import { useState } from "react";

function TwoFactorSettingsPage() {
	const navigate = useNavigate();
	const { data: status, isLoading } = use2FAStatus();
	const disable2FA = useDisable2FA();
	const generateCodes = useGenerateRecoveryCodes();
	const setPreferredMethod = useSetPreferredMethod();

	const [showDisableConfirm, setShowDisableConfirm] = useState(false);
	const [disableCode, setDisableCode] = useState("");
	const [showNewCodes, setShowNewCodes] = useState(false);
	const [pendingMethod, setPendingMethod] = useState<TwoFactorMethod | null>(null);

	const handleDisable = async () => {
		if (disableCode.length !== 6) return;

		try {
			await disable2FA.mutateAsync(disableCode);
			navigate({ to: "/" });
		} catch (error) {
			setDisableCode("");
		}
	};

	const handleGenerateNewCodes = async () => {
		try {
			await generateCodes.mutateAsync();
			setShowNewCodes(true);
		} catch (error) {
			console.error("Failed to generate codes:", error);
		}
	};

	const handleSetPreferred = (method: TwoFactorMethod) => {
		setPendingMethod(method);
		setPreferredMethod.mutate(method, {
			onSettled: () => setPendingMethod(null),
		});
	};

	const preferredMethod = status?.preferred_method ?? null;
	const smsVerified = Boolean(status?.sms_verified);
	const methodOptions: Array<{
		key: TwoFactorMethod;
		title: string;
		description: string;
		available: boolean;
		helper?: string;
	}> = [
		{
			key: "totp",
			title: "Authenticator App",
			description:
				"Use 6-digit codes generated by apps like Google Authenticator, 1Password, or Authy.",
			available: Boolean(status?.has_totp),
			helper: "Scan the QR code via the setup page if you need to reconfigure your authenticator app.",
		},
		{
			key: "email",
			title: "Email",
			description: "Receive verification codes at your account email address.",
			available: true,
			helper: "Email is always available as a fallback option.",
		},
		{
			key: "sms",
			title: "SMS",
			description: "Get verification codes sent to your mobile phone via text message.",
			available: smsVerified,
			helper: status?.phone_number
				? smsVerified
					? `Verified number: ${status.phone_number}`
					: `Number pending verification: ${status.phone_number}`
				: "Add a phone number from the setup page to enable SMS.",
		},
	];

	if (isLoading) {
		return (
			<Layout>
				<LoadingPage message="Loading 2FA settings..." fullScreen={false} />
			</Layout>
		);
	}

	if (!status?.is_enabled) {
		return (
			<Layout>
				<div className="flex justify-center py-16">
					<div className="max-w-md w-full bg-white rounded-lg shadow-md p-6 text-center space-y-4">
						<h1 className="text-2xl font-semibold">Two-Factor Authentication</h1>
						<p className="text-gray-600">
							2FA is not enabled for your account. Enable it to add an extra layer of
							security.
						</p>
						<Button
							onClick={() => navigate({ to: "/2fa/setup" })}
							className="w-full"
						>
							Enable 2FA
						</Button>
					</div>
				</div>
			</Layout>
		);
	}

	return (
		<Layout>
			<div className="max-w-3xl mx-auto space-y-6">
				{/* Header */}
				<div className="bg-white rounded-lg shadow-md p-6">
					<div className="flex items-start justify-between">
						<div>
							<h1 className="text-2xl font-semibold mb-2">
								Two-Factor Authentication
							</h1>
							<div className="flex items-center gap-2">
								<span className="inline-flex items-center bg-green-100 text-green-800 px-3 py-1 rounded-full text-sm font-semibold">
									✓ Enabled
								</span>
								<span className="text-sm text-gray-600">
									Method:{" "}
									<span className="font-semibold">
										{status.preferred_method?.toUpperCase()}
									</span>
								</span>
							</div>
						</div>
					</div>
				</div>

				{/* Preferred Method */}
				<div className="bg-white rounded-lg shadow-md p-6 space-y-4">
					<div className="flex items-start justify-between">
						<div>
							<h2 className="text-xl font-semibold mb-1">Default Verification Method</h2>
							<p className="text-sm text-gray-600">
								Choose which factor we request during login. Configure additional factors from the setup page whenever you need to switch.
							</p>
						</div>
						{setPreferredMethod.isPending && (
							<span className="text-sm text-gray-500">Updating…</span>
						)}
					</div>

					<div className="grid gap-4 md:grid-cols-3">
						{methodOptions.map((option) => {
							const isDefault = preferredMethod === option.key;
							const isPendingOption = setPreferredMethod.isPending && pendingMethod === option.key;

							return (
								<div
									key={option.key}
									className="border border-gray-200 rounded-lg p-4 flex flex-col gap-3"
								>
									<div className="flex items-center justify-between">
										<h3 className="font-semibold text-lg">{option.title}</h3>
										{isDefault && (
											<span className="bg-green-100 text-green-700 text-xs font-semibold px-2 py-1 rounded-full">
												Default
											</span>
										)}
									</div>
									<p className="text-sm text-gray-600">{option.description}</p>

									{option.key === "sms" && status?.phone_number && (
										<p className="text-sm text-gray-500">
											Sending to {status.phone_number}
										</p>
									)}

									{option.helper && (
										<p className="text-xs text-gray-500">{option.helper}</p>
									)}

									<div className="mt-auto">
										{option.available ? (
											isDefault ? (
												<p className="text-sm text-green-700 font-medium">Currently in use</p>
											) : (
												<Button
													onClick={() => handleSetPreferred(option.key)}
													disabled={setPreferredMethod.isPending}
													className="w-full"
												>
													{isPendingOption ? "Saving…" : "Set as default"}
												</Button>
											)
										) : (
											<Button
												variant="outline"
												onClick={() => navigate({ to: "/2fa/setup" })}
												className="w-full"
											>
												{option.key === "sms" && status?.phone_number
													? "Verify phone number"
													: "Configure in setup"}
											</Button>
										)}
									</div>
								</div>
							);
						})}
					</div>

					{setPreferredMethod.error && (
						<p className="text-sm text-red-600">
							{(setPreferredMethod.error as any)?.message || "Failed to update default method."}
						</p>
					)}
				</div>

				{/* Recovery Codes */}
				<div className="bg-white rounded-lg shadow-md p-6">
					<h2 className="text-xl font-semibold mb-4">Recovery Codes</h2>

					{!showNewCodes ? (
						<div className="space-y-4">
							<p className="text-gray-600 text-sm">
								Recovery codes can be used to access your account if you lose
								access to your authenticator device. Each code can only be used
								once.
							</p>

							<div className="flex gap-2">
								<Button
									onClick={handleGenerateNewCodes}
									disabled={generateCodes.isPending}
									variant="outline"
								>
									{generateCodes.isPending
										? "Generating..."
										: "Generate New Recovery Codes"}
								</Button>

								<Button
									onClick={() => navigate({ to: "/2fa/settings" })}
									variant="outline"
								>
									View Current Codes
								</Button>
							</div>

							{generateCodes.error && (
								<p className="text-sm text-red-600">
									{(generateCodes.error as any)?.message ||
										"Failed to generate codes"}
								</p>
							)}
						</div>
					) : (
						<div className="space-y-4">
							{generateCodes.data && (
								<RecoveryCodeList codes={generateCodes.data.recovery_codes} />
							)}
							<Button onClick={() => setShowNewCodes(false)} variant="outline">
								Done
							</Button>
						</div>
					)}
				</div>

				{/* Trusted Devices */}
				<div className="bg-white rounded-lg shadow-md p-6">
					<h2 className="text-xl font-semibold mb-4">Trusted Devices</h2>
					<p className="text-gray-600 text-sm mb-4">
						Manage devices that can skip 2FA verification for 30 days.
					</p>
					<Button
						onClick={() => navigate({ to: "/2fa/trusted-devices" })}
						variant="outline"
					>
						Manage Trusted Devices
					</Button>
				</div>

				{/* Disable 2FA */}
				<div className="bg-white rounded-lg shadow-md p-6">
					<h2 className="text-xl font-semibold mb-4 text-red-600">
						Disable Two-Factor Authentication
					</h2>

					{!showDisableConfirm ? (
						<div className="space-y-4">
							<p className="text-gray-600 text-sm">
								Disabling 2FA will make your account less secure. You'll only
								need your password to log in.
							</p>
							<Button
								onClick={() => setShowDisableConfirm(true)}
								variant="outline"
								className="text-red-600 border-red-300 hover:bg-red-50"
							>
								Disable 2FA
							</Button>
						</div>
					) : (
						<div className="space-y-4">
							<div className="bg-red-50 border border-red-200 rounded p-4">
								<p className="text-sm text-red-800 font-semibold mb-2">
									⚠️ Are you sure?
								</p>
								<p className="text-sm text-red-800">
									Enter your 6-digit verification code to confirm disabling 2FA.
								</p>
							</div>

							<VerificationInput
								value={disableCode}
								onChange={setDisableCode}
								onComplete={handleDisable}
								disabled={disable2FA.isPending}
							/>

							<div className="flex gap-2">
								<Button
									onClick={handleDisable}
									disabled={disableCode.length !== 6 || disable2FA.isPending}
									variant="outline"
									className="flex-1 text-red-600 border-red-300 hover:bg-red-50"
								>
									{disable2FA.isPending ? "Disabling..." : "Confirm Disable"}
								</Button>
								<Button
									onClick={() => {
										setShowDisableConfirm(false);
										setDisableCode("");
									}}
									variant="outline"
									className="flex-1"
									disabled={disable2FA.isPending}
								>
									Cancel
								</Button>
							</div>

							{disable2FA.error && (
								<p className="text-sm text-red-600 text-center">
									{(disable2FA.error as any)?.message ||
										"Failed to disable 2FA"}
								</p>
							)}
						</div>
					)}
				</div>

				{/* Back Button */}
				<div className="text-center">
					<button
						onClick={() => navigate({ to: "/" })}
						className="text-sm text-gray-600 hover:text-gray-800"
					>
						← Back to home
					</button>
				</div>
			</div>
		</Layout>
	);
}

export const Route = createFileRoute("/2fa/settings")({
	component: TwoFactorSettingsPage,
});
